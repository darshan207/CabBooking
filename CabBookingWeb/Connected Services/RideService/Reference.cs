//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CabBookingWeb.RideService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ride", Namespace="http://schemas.datacontract.org/2004/07/CabBookingRide")]
    [System.SerializableAttribute()]
    public partial class Ride : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int driverIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int rideIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string toField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int userIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int driverId {
            get {
                return this.driverIdField;
            }
            set {
                if ((this.driverIdField.Equals(value) != true)) {
                    this.driverIdField = value;
                    this.RaisePropertyChanged("driverId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string from {
            get {
                return this.fromField;
            }
            set {
                if ((object.ReferenceEquals(this.fromField, value) != true)) {
                    this.fromField = value;
                    this.RaisePropertyChanged("from");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int rideId {
            get {
                return this.rideIdField;
            }
            set {
                if ((this.rideIdField.Equals(value) != true)) {
                    this.rideIdField = value;
                    this.RaisePropertyChanged("rideId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string to {
            get {
                return this.toField;
            }
            set {
                if ((object.ReferenceEquals(this.toField, value) != true)) {
                    this.toField = value;
                    this.RaisePropertyChanged("to");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int userId {
            get {
                return this.userIdField;
            }
            set {
                if ((this.userIdField.Equals(value) != true)) {
                    this.userIdField = value;
                    this.RaisePropertyChanged("userId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RideService.IRide")]
    public interface IRide {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRide/AddRide", ReplyAction="http://tempuri.org/IRide/AddRideResponse")]
        bool AddRide(CabBookingWeb.RideService.Ride ride);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRide/AddRide", ReplyAction="http://tempuri.org/IRide/AddRideResponse")]
        System.Threading.Tasks.Task<bool> AddRideAsync(CabBookingWeb.RideService.Ride ride);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRide/UpdateRide", ReplyAction="http://tempuri.org/IRide/UpdateRideResponse")]
        bool UpdateRide(CabBookingWeb.RideService.Ride ride);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRide/UpdateRide", ReplyAction="http://tempuri.org/IRide/UpdateRideResponse")]
        System.Threading.Tasks.Task<bool> UpdateRideAsync(CabBookingWeb.RideService.Ride ride);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRide/DeleteRide", ReplyAction="http://tempuri.org/IRide/DeleteRideResponse")]
        bool DeleteRide(int rideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRide/DeleteRide", ReplyAction="http://tempuri.org/IRide/DeleteRideResponse")]
        System.Threading.Tasks.Task<bool> DeleteRideAsync(int rideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRide/FindRide", ReplyAction="http://tempuri.org/IRide/FindRideResponse")]
        CabBookingWeb.RideService.Ride FindRide(int rideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRide/FindRide", ReplyAction="http://tempuri.org/IRide/FindRideResponse")]
        System.Threading.Tasks.Task<CabBookingWeb.RideService.Ride> FindRideAsync(int rideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRide/GetRides", ReplyAction="http://tempuri.org/IRide/GetRidesResponse")]
        CabBookingWeb.RideService.Ride[] GetRides();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRide/GetRides", ReplyAction="http://tempuri.org/IRide/GetRidesResponse")]
        System.Threading.Tasks.Task<CabBookingWeb.RideService.Ride[]> GetRidesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRideChannel : CabBookingWeb.RideService.IRide, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RideClient : System.ServiceModel.ClientBase<CabBookingWeb.RideService.IRide>, CabBookingWeb.RideService.IRide {
        
        public RideClient() {
        }
        
        public RideClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RideClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RideClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RideClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddRide(CabBookingWeb.RideService.Ride ride) {
            return base.Channel.AddRide(ride);
        }
        
        public System.Threading.Tasks.Task<bool> AddRideAsync(CabBookingWeb.RideService.Ride ride) {
            return base.Channel.AddRideAsync(ride);
        }
        
        public bool UpdateRide(CabBookingWeb.RideService.Ride ride) {
            return base.Channel.UpdateRide(ride);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRideAsync(CabBookingWeb.RideService.Ride ride) {
            return base.Channel.UpdateRideAsync(ride);
        }
        
        public bool DeleteRide(int rideId) {
            return base.Channel.DeleteRide(rideId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRideAsync(int rideId) {
            return base.Channel.DeleteRideAsync(rideId);
        }
        
        public CabBookingWeb.RideService.Ride FindRide(int rideId) {
            return base.Channel.FindRide(rideId);
        }
        
        public System.Threading.Tasks.Task<CabBookingWeb.RideService.Ride> FindRideAsync(int rideId) {
            return base.Channel.FindRideAsync(rideId);
        }
        
        public CabBookingWeb.RideService.Ride[] GetRides() {
            return base.Channel.GetRides();
        }
        
        public System.Threading.Tasks.Task<CabBookingWeb.RideService.Ride[]> GetRidesAsync() {
            return base.Channel.GetRidesAsync();
        }
    }
}
